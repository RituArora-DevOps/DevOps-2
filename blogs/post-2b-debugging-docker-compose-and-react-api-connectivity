# Post 2: Debugging Docker Compose and React API Connectivity

In this post, I walk through a real-world debugging session from my MERN To-Do app that was Dockerized using Docker Compose.

## The Problem

After Dockerizing my app:

- The frontend loaded, but displayed: `Failed to fetch todos`
- Console showed: `GET http://localhost:3000/undefined 404`
- The environment variable `REACT_APP_API_URL` was not being used as expected

## The Root Causes

1. The `.env` file was mistakenly included in `.dockerignore`, so it wasn't copied into the Docker build context.
2. Because of this, `REACT_APP_API_URL` was not defined at build time â€” React fell back to `undefined`.
3. The URL `http://todo-backend:5000` works inside the Docker network but is not recognized by the host browser.

## Fixes Applied

- Removed `.env` from `.dockerignore` to include it during Docker build
- Updated the `.env` file to:

  ```env
  REACT_APP_API_URL=http://localhost:5000/api/todos
  ```

- Rebuilt the frontend container using Docker Compose

### Is removing `.env` from `.dockerignore` a security threat?

Yes â€” removing `.env` from `.dockerignore` **can be a serious security risk**, especially if the file contains secrets like:

- API keys
- Database credentials
- JWT secrets
- OAuth tokens

When `.env` is not ignored:

- It gets copied into the Docker image during build.
- Anyone with access to that image can potentially inspect and read its contents.
- If the image is pushed to a public registry like Docker Hub, the secrets could be publicly exposed.

---

### Best Practices

- Use `.env` for **non-sensitive** frontend values (e.g., `REACT_APP_API_URL`, `PORT=3000`).
- Never hardcode secrets in `.env` files used in the build context.
- For sensitive backend secrets:
- Use [Docker secrets](https://docs.docker.com/engine/swarm/secrets/)
- Inject environment variables **at runtime** via `docker-compose` or `Docker run`
- Use environment management in **CI/CD pipelines**

---

### Example: Safe Frontend `.env`

```env
REACT_APP_API_URL=http://todo-backend:5000/api/todos

## Concepts & Clarifications

### What does Docker Compose do?

Docker Compose allows you to define and run multi-container applications. It manages services like the frontend, backend, and database, defines how they interact, and creates a shared network. With a single command (`docker-compose up`), it starts all services and configures networks, ports, and volumes.

### Why did `localhost:5000` work but `todo-backend` didnâ€™t?

- The name `todo-backend` is a **Docker-internal hostname** used by containers to talk to each other.
- The browser runs on the **host machine**, not inside a container, so it doesnâ€™t recognize `todo-backend`.
- Because the backend exposes port `5000:5000`, accessing it via `http://localhost:5000` from the host works.

## Lessons Learned

- React reads `.env` variables only during build â€” make sure theyâ€™re present in the build context
- Don't ignore critical files like `.env` unless intentional
- Use Docker service names like `todo-backend` only for internal container communication
- Use `localhost` to access services exposed to the host

---

App now works perfectly at [http://localhost:3000](http://localhost:3000) ðŸŽ‰
```
